rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /trips/{tripId} {
      // For creating a new trip, require that the data being written has an ownerId that matches the authenticated user.
      allow create: if request.auth != null &&
                      request.resource.data.ownerId == request.auth.uid;
      
      // For read/update/delete, require that the user is the owner or a collaborator.
      allow read, update, delete: if request.auth != null &&
        (resource.data.ownerId == request.auth.uid ||
         request.auth.uid in resource.data.collaborators);
      
      match /notices/{noticeId} {
        allow create: if request.auth != null;
        allow read, update, delete: if request.auth != null;
      }
      
      match /destinations/{destinationId} {
        allow create: if request.auth != null;
        allow read, update, delete: if request.auth != null;

        // Add rules for the checklists subcollection
        match /checklists/{checklistId} {
          allow create, read, update, delete: if request.auth != null;
        }
      }
    }
    
    match /users/{userId} {
      allow read, write: if true;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    match /icsFiles/{fileId} {
      // Allow anyone to read the ICS file so it can be added to a calendar
      allow read: if true;
      // Only authenticated users can upload ICS files
      allow write: if request.auth != null;
    }
  }
}